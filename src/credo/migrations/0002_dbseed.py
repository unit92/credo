# Generated by Django 2.2.4 on 2019-09-15 09:28

import datetime
from django.utils import timezone
from django.db import migrations, models
from django.contrib.auth.models import User

MEI_SEED_PATH = './credo/migrations/seed_mei/'


# MIGRATE FUNCTIONS
def load_composers(apps, schema_editor):
    Composer = apps.get_model('credo', 'Composer')

    c1 = Composer(name='Craig Smith')
    c1.save()

    c2 = Composer(name='Luke Tuthill')
    c2.save()

    c3 = Composer(name='Joel Aquilina')
    c3.save()

    c4 = Composer(name='Alex Mirrington')
    c4.save()


def load_songs(apps, schema_editor):
    Song = apps.get_model('credo', 'Song')
    Composer = apps.get_model('credo', 'Composer')

    composer = Composer.objects.get(name='Craig Smith')
    s1 = Song(name='JS Standard', composer=composer)
    s1.save()

    composer = Composer.objects.get(name='Luke Tuthill')
    s2 = Song(name='Jingle Django', composer=composer)
    s2.save()

    composer = Composer.objects.get(name='Joel Aquilina')
    s3 = Song(name='Environment Song', composer=composer)
    s3.save()

    composer = Composer.objects.get(name='Alex Mirrington')
    s4 = Song(name='Diffing Song', composer=composer)
    s4.save()


def load_mei(apps, schema_editor):
    MEI = apps.get_model('credo', 'MEI')

    m1 = MEI(data=f'{MEI_SEED_PATH}diffA.mei')
    m1.save()

    m2 = MEI(data=f'{MEI_SEED_PATH}diffB.mei')
    m2.save()

    m3 = MEI(data=f'{MEI_SEED_PATH}diffC.mei')
    m3.save()

    m4 = MEI(data=f'{MEI_SEED_PATH}diffD.mei')
    m4.save()


def load_users(apps, schema_editor):
    User = apps.get_model('auth', 'User')

    u1 = User(username='Craig', password='1234')
    u1.save()

    u2 = User(username='Luke', password='1234')
    u2.save()

    u3 = User(username='Joel', password='1234')
    u3.save()

    u4 = User(username='Alex', password='1234')
    u4.save()


def load_editions(apps, schema_editor):
    Edition = apps.get_model('credo', 'Edition')
    Song = apps.get_model('credo', 'Song')
    MEI = apps.get_model('credo', 'MEI')
    User = apps.get_model('auth', 'User')

    user = User.objects.get(username='Craig')
    piece = MEI.objects.get(data=f'{MEI_SEED_PATH}diffA.mei')
    song = Song.objects.get(name='JS Standard')
    e1 = Edition(name='Christmas JS', song=song, mei=piece, uploader=user)
    e1.save()

    user = User.objects.get(username='Luke')
    piece = MEI.objects.get(data=f'{MEI_SEED_PATH}diffB.mei')
    song = Song.objects.get(name='Jingle Django')
    e2 = Edition(name='Python Play', song=song, mei=piece, uploader=user)
    e2.save()

    user = User.objects.get(username='Joel')
    piece = MEI.objects.get(data=f'{MEI_SEED_PATH}diffC.mei')
    song = Song.objects.get(name='Environment Song')
    e3 = Edition(name='Green Edition', song=song, mei=piece, uploader=user)
    e3.save()

    user = User.objects.get(username='Alex')
    piece = MEI.objects.get(data=f'{MEI_SEED_PATH}diffD.mei')
    song = Song.objects.get(name='Diffing Song')
    e4 = Edition(name='Congruent Edition', song=song, mei=piece, uploader=user)
    e4.save()

def load_revisions(apps, schema_editor):
    Revision = apps.get_model('credo', 'Revision')
    Edition = apps.get_model('credo', 'Edition')
    MEI = apps.get_model('credo', 'MEI')
    User = apps.get_model('auth', 'User')

    craig_edition = Edition.objects.get(name='Christmas JS')
    luke_edition = Edition.objects.get(name='Python Play')
    joel_edition = Edition.objects.get(name='Green Edition')
    alex_edition = Edition.objects.get(name='Congruent Edition')

    account = User.objects.get(username='Craig')
    rev_file =  MEI.objects.get(data=f'{MEI_SEED_PATH}diffB.mei')
    r1 = Revision(user=account, mei=rev_file)
    r1.save()
    r1.editions.add(craig_edition)

    account = User.objects.get(username='Luke')
    rev_file = MEI.objects.get(data=f'{MEI_SEED_PATH}diffC.mei')
    r2 = Revision(user=account, mei=rev_file)
    r2.save()
    r2.editions.add(luke_edition)

    account = User.objects.get(username='Joel')
    rev_file = MEI.objects.get(data=f'{MEI_SEED_PATH}diffD.mei')
    r3 = Revision(user=account, mei=rev_file)
    r3.save()
    r3.editions.add(joel_edition)

    account = User.objects.get(username='Alex')
    rev_file = MEI.objects.get(data=f'{MEI_SEED_PATH}diffA.mei')
    r4 = Revision(user=account, mei=rev_file)
    r4.save()
    r4.editions.add(alex_edition)


def load_comments(apps, schema_editor):
    Comment = apps.get_model('credo', 'Comment')
    Revision = apps.get_model('credo', 'Revision')
    User = apps.get_model('auth', 'User')

    account = User.objects.get(username='Craig')
    revision = Revision.objects.get(user=account)
    c1 = Comment(revision=revision,
                 text='Comment A',
                 user=account,
                 mei_element_id='m-79')
    c1.save()

    account = User.objects.get(username='Luke')
    revision = Revision.objects.get(user=account)
    c2 = Comment(revision=revision,
                 text='Comment B',
                 user=account,
                 mei_element_id='m-79')
    c2.save()

    account = User.objects.get(username='Joel')
    revision = Revision.objects.get(user=account)
    c3 = Comment(revision=revision,
                 text='Comment C',
                 user=account,
                 mei_element_id='m-79')
    c3.save()

    account = User.objects.get(username='Alex')
    revision = Revision.objects.get(user=account)
    c4 = Comment(revision=revision,
                 text='Comment D',
                 user=account,
                 mei_element_id='m-79')
    c4.save()


# ROLLBACK FUNCTIONS
def delete_composers(apps, schema_editor):
    Composer = apps.get_model('credo', 'Composer')
    Composer.objects.get(name='Craig Smith').delete()
    Composer.objects.get(name='Luke Tuthill').delete()
    Composer.objects.get(name='Joel Aquilina').delete()
    Composer.objects.get(name='Alex Mirrington').delete()


def delete_songs(apps, schema_editor):
    Song = apps.get_model('credo', 'Song')
    Song.objects.get(name='JS Standard').delete()
    Song.objects.get(name='Jingle Django').delete()
    Song.objects.get(name='Environment Song').delete()
    Song.objects.get(name='Diffing Song').delete()


def delete_mei(apps, schema_editor):
    MEI = apps.get_model('credo', 'MEI')
    MEI.objects.get(data=f'{MEI_SEED_PATH}diffA.mei').delete()
    MEI.objects.get(data=f'{MEI_SEED_PATH}diffB.mei').delete()
    MEI.objects.get(data=f'{MEI_SEED_PATH}diffC.mei').delete()
    MEI.objects.get(data=f'{MEI_SEED_PATH}diffD.mei').delete()


def delete_users(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    User.objects.get(username='Craig').delete()
    User.objects.get(username='Luke').delete()
    User.objects.get(username='Joel').delete()
    User.objects.get(username='Alex').delete()


def delete_editions(apps, schema_editor):
    Edition = apps.get_model('credo', 'Edition')
    Edition.objects.get(name='Christmas JS').delete()
    Edition.objects.get(name='Python Play').delete()
    Edition.objects.get(name='Green Edition').delete()
    Edition.objects.get(name='Congruent Edition').delete()

# No delete needed in this function, edition deletion cascades on
# the revisions, hence delete_editions function does the work.
# Function created to suppress rollback error
def delete_revisions(apps, schema_editor):
    Revision = apps.get_model('credo', 'Revision')


# Function created to suppress rollback error
def delete_comments(apps, schema_editor):
    Comment = apps.get_model('credo', 'Comment')


class Migration(migrations.Migration):

    dependencies = [
        ('credo', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_composers, delete_composers),
        migrations.RunPython(load_songs, delete_songs),
        migrations.RunPython(load_mei, delete_mei),
        migrations.RunPython(load_users, delete_users),
        migrations.RunPython(load_editions, delete_editions),
        migrations.RunPython(load_revisions, delete_revisions),
        migrations.RunPython(load_comments, delete_comments),
    ]
